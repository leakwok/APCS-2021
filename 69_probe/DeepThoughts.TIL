Lea Kwok
APCS
HW69 -- Making Sense
time spent: 00.5 hour

 * Mean execution times(real time) for boards of size n*n:
 * n=5   1.579s    across 5 executions
 * n=6   20.198s    across 3 executions
 * n=7   11min 16.567s    across 1 execution
 * n=8   15min 7.039s    across 1 execution

q0: From any starting position, can an open tour always be found? Explain.
    No, from certain start positions, a solution cannot be found, so an open tour would not be possible. As long as there is a solution possible from that position, there is an open tour.
 
q1: Same, but for closed tour.
	A closed tour is only possible if there are an even number of squares in the board. (Credit to Team JOJO) The way a knight moves, it will end up on a square that is differently colored from its start square. For a tour to be closed, the knight would have to end on the opposite color, which means there has to be an even number of squares.

q2: How do you explain the increase in execution time as n increases?
	The execution time increases non-linearly. As we add more nodes to our tree, the execution time increases with each branch we have to check. 

q3: Thoughts on optimization?
	We could change the order the knight checks for possible moves in. Instead of going in a clockwise circle, have the first check be the bottom right, and then the top left, have it check each of the corners as possibilities before trying the edges. 

ALGO:
- Fill all possible spaces with a #
- From the start, follow the path until you hit a crossroads
- When faced with two or more possible paths, choose one to follow
- If it leads to a dead end, trace steps back to the crossroads and choose a different path
- Repeat until reached end $
